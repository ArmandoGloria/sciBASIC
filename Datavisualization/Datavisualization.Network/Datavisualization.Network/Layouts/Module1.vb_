Module Module1
    Class Node

        Public id = node_id        ' id (as an integer for example)
        Public neighbour_ids = New Integer() {}     ' list of the ids of the neighbours
        Public degree = 0          ' number of neighbours
        Public coordinate_x = 0
        Public coordinate_y = 0
        Public force_coulomb As Double()
        Public force_harmonic As Double()
        Public cc_number = 0       ' the number of the connected component (0 if not assigned yet)
        Public cc_centers = New Object() {}
        Public velocity = New Double() {0, 0}  ' instead of replacing the nodes, change its velocity to produce inertia
        Public movable = 1
    End Class

    Public Sub calculateStep(Nodes As Node())
        Dim center_distance = 10.0          ' the distance from the middle of the screen to each border
        Dim scaling_factor = 1.0            ' the zoom-factor (the smaller, the more surface is shown)
        Dim zooming = 0                     ' is the application zooming right now?
        Dim zoom_in_border = 1.0            ' limit between graph and screen-border for zooming in
        Dim zooming_out = 0
        Dim circle_diameter = 20            ' the diameter of the node-circles
        Dim timestep = 0
        Dim thermal_energie = 0.0           ' set this to 0.3 or 0.0 to (de)activate thermal_energie
        Dim all_energies = New List(Of Double)                ' list of all energies sorted by time
        Dim highest_energy = 0              ' the highest energie occuring
        Dim energie_change_limit = 0.0000001    ' if energie doesn't change more than this, process is stoped
        Dim velocity_maximum = 0.05
        Dim friction = 0.0005               ' is subtracted from the velocity at each timestep for stop oscillations
        Dim show_energies_in_background = 1
        Dim status_message = ""
        Dim grabed_node = ""
        Dim grabed_component = ""
        Dim dont_finish_calculating = 1
        Dim show_energie_in_background = 1
        Dim show_textinformation_in_background = 1



        Dim new_overall_energie = 0
        Dim random As New Random

        ' calculate the repulsive force for each node
        For Each node In Nodes
            node.force_coulomb = New Double() {0, 0}
            For Each node2 In Nodes
                If (node.Id <> node2.Id) And (node.cc_number <> node2.cc_number) Then
                    Dim distance_x = node.coordinate_x - node2.coordinate_x
                    Dim distance_y = node.coordinate_y - node2.coordinate_y
                    Dim radius = Math.Sqrt(distance_x * distance_x + distance_y * distance_y)
                    If radius <> 0 Then
                        Dim vector = {distance_x / radius, distance_y / radius}
                        node.force_coulomb(0) += 0.01 * vector(0) / radius
                        node.force_coulomb(1) += 0.01 * vector(1) / radius
                        ' add this force to the overall energie
                        new_overall_energie += 0.01 / radius
                    Else
                        ' if the nodes lie on each other, randomly replace them a bit
                        node.force_coulomb(0) += random.NextDouble() - 0.5
                        node.force_coulomb(1) += random.NextDouble() - 0.5
                    End If
                End If
            Next
        Next

        Dim force_harmonic_x, force_harmonic_y

        ' calculate the attractive force for each node
        For Each node In Nodes
            node.force_harmonic = {0, 0}
            For Each neighbor_id In node.neighbour_ids
                Dim node2 = Nodes(neighbor_id)
                Dim distance_x = node.coordinate_x - node2.coordinate_x
                Dim distance_y = node.coordinate_y - node2.coordinate_y
                Dim radius = Math.Sqrt(distance_x * distance_x + distance_y * distance_y)
                If radius <> 0 Then
                    Dim vector = {distance_x / radius * -1, distance_y / radius * -1}
                    force_harmonic_x = vector(0) * radius * radius / 100
                    force_harmonic_y = vector(1) * radius * radius / 100
                Else
                    ' if the nodes lie on each other, randomly replace them a bit
                    force_harmonic_x = random.NextDouble() - 0.5
                    force_harmonic_y = random.NextDouble() - 0.5
                End If
                node.force_harmonic(0) += force_harmonic_x
                node.force_harmonic(1) += force_harmonic_y
                ' add this force to the overall energie
                new_overall_energie += radius * radius / 100
            Next
        Next

        ' calculate the difference between the old and new overall energie
        Dim overall_energie As Double
        Dim overall_energie_difference = overall_energie - new_overall_energie
        overall_energie = new_overall_energie
        all_energies = New List(Of Double) From {overall_energie}

        If overall_energie > highest_energy Then
            highest_energy = overall_energie
        End If

        Dim calculation_finished As Integer

        If Not dont_finish_calculating Then
            If (overall_energie_difference < energie_change_limit And overall_energie_difference > -1 * energie_change_limit) Then
                calculation_finished = 1
            End If
        End If

        ' set the new position influenced by the force
        If timestep = 50 And thermal_energie > 0 Then
            thermal_energie = 0.2
        End If
        If timestep = 110 And thermal_energie > 0 Then
            thermal_energie = 0.1
        End If
        If timestep = 150 And thermal_energie > 0 Then
            thermal_energie = 0.0
        End If
        For Each node In Nodes
            Dim force_coulomb_x = node.force_coulomb(0), force_coulomb_y = node.force_coulomb(1)
            force_harmonic_x = node.force_harmonic(0) : force_harmonic_y = node.force_harmonic(1)
            ' node.coordinate_x += force_coulomb_x + force_harmonic_x
            ' node.coordinate_y += force_coulomb_y + force_harmonic_y

            node.velocity(0) += (force_coulomb_x + force_harmonic_x) * 0.1
            node.velocity(1) += (force_coulomb_y + force_harmonic_y) * 0.1
            ' ensure maximum velocity
            If (node.velocity(0) > velocity_maximum) Then
                node.velocity(0) = velocity_maximum
            End If
            If (node.velocity(1) > velocity_maximum) Then
                node.velocity(1) = velocity_maximum
            End If
            If (node.velocity(0) < -1 * velocity_maximum) Then
                node.velocity(0) = -1 * velocity_maximum
            End If
            If (node.velocity(1) < -1 * velocity_maximum) Then
                node.velocity(1) = -1 * velocity_maximum
            End If
            ' get friction into play
            If node.velocity(0) > friction Then
                node.velocity(0) -= friction
            End If
            If node.velocity(0) < -1 * friction Then
                node.velocity(0) += friction
            End If
            If node.velocity(1) > friction Then
                node.velocity(1) -= friction
            End If
            If node.velocity(1) < -1 * friction Then
                node.velocity(1) += friction
            End If

            ' FINALLY SET THE NEW POSITION
            If node.id <> grabed_node Or node.cc_number = grabed_component Then
                If node.movable = 1 Then
                    node.coordinate_x += node.velocity(0)
                    node.coordinate_y += node.velocity(1)
                End If
            End If
            If thermal_energie > 0 Then
                If node.movable = 1 Then
                    node.coordinate_x += random.NextDouble() * thermal_energie * 2 - thermal_energie
                    node.coordinate_y += random.NextDouble() * thermal_energie * 2 - thermal_energie
                End If
            End If
        Next
        ' calculate centers for all connected components
        Dim min_max As List(Of Double()) = New List(Of Double())
        Dim center = New List(Of Double)
        For i As Integer = 0 To connected_components_count
            min_max.Add({1000, 1000, -1000, -1000})
        Next
        For i As Integer = 0 To connected_components_count
            For Each node In Nodes
                If node.cc_number = i + 1 Then
                    If node.coordinate_x < min_max(i)(0) Then
                        min_max(i)(0) = node.coordinate_x
                    End If
                    If node.coordinate_y < min_max(i)(1) Then
                        min_max(i)(1) = node.coordinate_y
                    End If
                    If node.coordinate_x > min_max(i)(2) Then
                        min_max(i)(2) = node.coordinate_x
                    End If
                    If node.coordinate_y > min_max(i)(3) Then
                        min_max(i)(3) = node.coordinate_y
                    End If
                End If
            Next
            center.AddRange({min_max(i)(0) + (min_max(i)(2) - min_max(i)(0)) / 2, min_max(i)(1) + (min_max(i)(3) - min_max(i)(1)) / 2})
        Next

        Dim distance

        ' if two components lie on each other, increase the distance between those
        For a As Integer = 0 To connected_components_count
            For b = 0 To connected_components_count
                ' if a <> b and center(a)(0) > min_max(b)(0) and center(a)(0) < min_max(b)(2) and center(a)(1) > min_max(b)(1) and center(a)(1) < min_max(b)(3):
                If a <> b Then
                    distance = 1
                    If ((min_max(a)(0) + distance > min_max(b)(0) And min_max(a)(0) - distance < min_max(b)(2)) Or (min_max(a)(2) + distance > min_max(b)(0) And min_max(a)(2) - distance < min_max(b)(2))) And ((min_max(a)(1) + distance > min_max(b)(1) And min_max(a)(1) - distance < min_max(b)(3)) Or (min_max(a)(3) + distance > min_max(b)(1) And min_max(a)(3) - distance < min_max(b)(3))) Then
                        ' calculate replacement with help of the distance vector
                        ' of the centers
                        Dim distance_x = center(a)(0) - center(b)(0)
                        distance_y = center(a)(1) - center(b)(1)
                        radius = sqrt(distance_x * distance_x + distance_y * distance_y)
                        replacement = {distance_x / radius * -1, distance_y / radius * -1}
                        replacement(0) *= random.NextDouble() * -0.1
                        replacement(1) *= random.NextDouble() * -0.1
                        For Each node In Nodes
                            If node.cc_number = a + 1 Then
                                If node.id <> grabed_node Then
                                    If node.movable = 1 Then
                                        node.coordinate_x += replacement(0)
                                        node.coordinate_y += replacement(1)
                                    End If
                                End If
                            End If
                        Next
                    End If
                End If
            Next
        Next
        ' calculate the center of the graph and position all nodes new, so that 
        ' the center becomes (0,0)
        Dim x_max = -1000
        Dim x_min = 1000
        Dim y_max = -1000
        Dim y_min = 1000

        For Each node In Nodes
            If node.coordinate_x < x_min Then
                x_min = node.coordinate_x
            End If
            If node.coordinate_x > x_max Then
                x_max = node.coordinate_x
            End If
            If node.coordinate_y < y_min Then
                y_min = node.coordinate_y
            End If
            If node.coordinate_y > y_max Then
                y_max = node.coordinate_y
            End If
        Next
        Dim center_x = x_min + (x_max - x_min) / 2
        Dim center_y = y_min + (y_max - y_min) / 2
        For Each node In Nodes
            If node.id <> grabed_node Then
                node.coordinate_x -= center_x
                node.coordinate_y -= center_y
            End If
        Next
        Dim scale = 0
        ' prevent nodes from leaving the screen - ZOOM OUT
        If (x_min < (center_distance / scaling_factor / -2)) Or (y_min < (center_distance / scaling_factor / -2)) Or (x_max > (center_distance / scaling_factor / 2)) Then
            scale = 1
        End If
        ' longer if-statement because node-caption is included
        If (y_max > (center_distance / scaling_factor / 2) - ((circle_diameter + 20) * scaling_factor * center_distance / c_height)) Then
            scale = 1
        End If
        ' zoom back in if necessary - ZOOM IN
        If (x_min - zoom_in_border > (center_distance / scaling_factor / -2)) And (y_min - zoom_in_border > (center_distance / scaling_factor / -2)) And (x_max + zoom_in_border < (center_distance / scaling_factor / 2)) And (y_max + zoom_in_border < (center_distance / scaling_factor / 2) - ((circle_diameter + 10) * scaling_factor * center_distance / c_height)) Then
            scale = -1
        End If

        If scale = 1 Then
            ' zoom out
            scaling_factor = scaling_factor * 0.99
            zooming = 50
            zooming_out = 1
        Else
            ' zoom in
            If scale = -1 Then
                scaling_factor = scaling_factor * 1.01
                zooming = 50
                zooming_out = 0
            Else
                ' don't zoom (count down the fading for the zooming message)
                If zooming > 0 Then
                    zooming -= 1
                End If
            End If
        End If
    End Sub

    Sub calculateConnectedComponents(nodes As Node())
        ' calculate the connected components of the graph
		all_node_ids = ()
		for node in nodes:
            all_node_ids.append(node.id)
        Next
		visited_node_ids = ()
		node_ids_to_process = ()
        connected_component_number = 0
        While Len(all_node_ids) > 0
            ' take an anchor node
            node_ids_to_process.append(all_node_ids.pop())
            connected_component_number += 1
            ' process all nodes that are reachable from the anchor-node
            While Len(node_ids_to_process) > 0
                anchor_node_id = node_ids_to_process.pop()
                ' set the anchors cc_number and add all neighbors to the process 
                ' list that haven't been yet
                anchor_node = getNode(anchor_node_id)
                anchor_node.cc_number = connected_component_number
				for neighbor_node_id in anchor_node.neighbour_ids:
					if not neighbor_node_id in visited_node_ids:
                        node_ids_to_process.append(neighbor_node_id)
						if neighbor_node_id in all_node_ids:
                            all_node_ids.remove(neighbor_node_id)
                        End If
                    End If
                    ' this node is finished
                    visited_node_ids.append(anchor_node_id)
                   loop
                loop

            connected_components_count = connected_component_number
    End Sub
End Module
