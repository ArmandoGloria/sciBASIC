<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.ComputingServices
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.ComputingServices.Asymmetric.Instance">
 <summary>
 服务实例
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Instance._socket">
 <summary>
 只是和管理节点之间的通信的通道
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.ShutdownInstance">
 <summary>
 关闭目标物理机上面的一个指定编号的实例进程
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.GetLoad">
 <summary>
 主节点获取目标物理机的当前的系统负载，请注意系统负载的计算方法是可以被复写的，这个是为了适应不同的需求
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.NodeRegister">
 <summary>
 物理机上面的服务节点在启动之后向主节点进行自身网络位置的注册
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.Protocols.GetInstanceList">
 <summary>
 主节点向目标物理主机请求所有在运行之中的服务进程实例
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.ParasitiferSvr">
 <summary>
 每一台物理主机上面只有一个宿主服务，所以其端口号固定
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Protocols.MasterSvr">
 <summary>
 中心节点服务
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer">
 <summary>
 主节点下面的每一台物理机上面的宿主服务，提供给该物理机上面的服务实例
 </summary>
 
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer.SystemLoad">
 <summary>
 获取当前物理主机上面的系统负载
 </summary>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._instance">
 <summary>
 服务实例的文件名
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._instanceList">
 <summary>
 在当前的物理主机上面所运行的服务实例列表
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._OAuth">
 <summary>
 这个节点在主节点上面的授权认证信息
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer._invokeAuthnic">
 <summary>
 当前的这个管理节点和其所管理的服务实例之间相互通信所需要的身份认证信息
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer.#ctor(System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="Instance">全路径</param>
 <param name="Master">主节点的IP公网地址</param>
 <param name="PublicToken"></param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Parasitifer.__getIPAddress">
 <summary>
 获取这台主机的公网IP地址
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.Asymmetric.DDM.Instance.Portal">
 <summary>
 直接对这个节点进行交互的端口
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master">
 <summary>
 非对等网络里面的中心主节点
 </summary>
 
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master._nodes">
 <summary>
 键名是IP地址，由于一台物理主机上面只会有一个管理节点，所以端口号都是固定了的
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.Nodes">
 <summary>
 获取在当前的服务器上面注册了的所有的管理节点的位置
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.#ctor(System.String)">
 <summary>
 
 </summary>
 <param name="PublicToken">计算自于宿主节点的证书哈希值</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.Folk(System.String)">
 <summary>
 创建出一个新的计算节点里面的服务实例
 </summary>
 <param name="CLI"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.__getPreferNode">
 <summary>
 获取得到最优先的物理机来开启新的计算节点
 本机的节点优先级别最低
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.NodeRegister(System.Int64,Microsoft.VisualBasic.Net.Protocol.RequestStream,System.Net.IPEndPoint)">
 <summary>
 
 </summary>
 <param name="CA"></param>
 <param name="request"></param>
 <param name="remote">可能得到的是内网IP，所以不太准确，不是用这个参数来标记节点的位置</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.Asymmetric.Master.__getLoad(System.String,Microsoft.VisualBasic.Net.SSL.Certificate)">
 <summary>
 
 </summary>
 <param name="Node">IP地址</param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.Extensions">
 <summary>
 不对外公开的拓展方法
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices">
 <summary>
 所需要进行节点调用的中心主机程序上面的节点计算服务
 </summary>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices.NodeServices">
 <summary>
 主机节点列表
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices.Nodes">
 <summary>
 每一个主机节点之上所运行的节点实例进程
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices.RunServices(Microsoft.VisualBasic.CommandLine.CommandLine)">
 <summary>
 线程会被阻塞在这里
 </summary>
 <param name="argvs">cli /console &lt;TRUE/FALSE></param>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices.HaveNodes">
 <summary>
 查询是否有可用的计算节点
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices.CreateNewNode(System.String)">
 <summary>
 创建一个新的计算节点
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices.Initialize(Microsoft.VisualBasic.CommandLine.CommandLine)">
 <summary>
 由于需要构建的是一个去中心化的网络模型，所以这个主机节点模型实例对象会在启动初始化的时候扫描当前的局域网之中的所有节点主机
 假若没有节点主机在运行，则会将自己以节点主机的模型进行运行
 </summary>
 <param name="argvs"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.ServicesComponents.Node">
 <summary>
 计算网络之中的一个节点实例
 </summary>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.ServicesComponents.Node.#ctor(System.String)">
 <summary>
 来自于外部的命令行参数字符串
 </summary>
 <param name="argv"></param>
 <remarks></remarks>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.ServicesComponents.NodeServices">
 <summary>
 运行于节点之中的随系统自动启动的节点服务
 </summary>
 <remarks></remarks>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.ServicesComponents.NodeServices._InstanceHash">
 <summary>
 由于是在同一个局域网之内，所以每一个节点实例都是使用一个服务Socket来获取来自于节点服务器的工作指令
 这个列表枚举着当前的节点服务至上所管理的本机上的节点实例
 </summary>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.ServicesComponents.NodeServices.SynchronizeData">
 <summary>
 当中心节点需要维护或者崩溃的时候，则当前的这个节点服务会使用这个同步数据来作为备用节点主机而工作
 由于中心节点不需要执行具体的计算，所以在初始化了<see cref="T:Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices"/>之后，本节点服务会被销毁
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.ServicesComponents.NodeServices.#ctor(System.String,System.String,System.String)">
 <summary>
 中心节点的位置
 </summary>
 <param name="ClusterServices">中心节点服务器的网络位置，只需要提供IP地址就可以了</param>
 <param name="NodeEntry">本地计算节点的可执行文件位置</param>
 <param name="WANIP">公网IP地址，在初始化的时候，假若没有公网IP，则使用局域网本机IP</param>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.GridProtocol.CLI_InitStart(System.String,Microsoft.VisualBasic.CommandLine.CommandLine)">
 <summary>
 计算节点程序，而非本节点程序，可以使用/wan_ip制定公网ip，假若节点网络不再局域网之中的话
 </summary>
 <param name="NodeEntry"></param>
 <param name="cli">cli /wan &lt;wan_ip_list> /wan_ip &lt;wan_ip></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.GridProtocol.CLI_StartCluster(Microsoft.VisualBasic.CommandLine.CommandLine,Microsoft.VisualBasic.ComputingServices.ServicesComponents.ClusterServices@)">
 <summary>
 ，可以使用/wan_ip制定公网ip，假若节点网络不再局域网之中的话
 </summary>
 <param name="cli"></param>
 <param name="API"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.GridProtocol.CLI_InitStartNodeServices(System.String,System.String,Microsoft.VisualBasic.CommandLine.CommandLine)">
 <summary>
 只启动节点服务，而非自动初始化为中心节点，可以使用/wan_ip制定公网ip，假若节点网络不再局域网之中的话
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.PbsProtocol">
 <summary>
 由于节点计算都是在局域网之中的，并且数据传输量大，所以在这里不需要在进行加密处理了，
 可能有一些数据会需求已加密的形式来保证数据能够被正确解析
 </summary>
 <remarks></remarks>
 
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.PbsProtocol.PBS_CLUSTER_SERVICES_PORT">
 <summary>
 中心节点的服务端口
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.PbsProtocol.PROTOCOLS.SYNCHRONIZE_DATA">
 <summary>
 每一个主机节点之间进行数据同步
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.PbsProtocol.CreateNewNode(System.String)">
 <summary>
 包含有两个校验数据
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.PbsProtocol.NodeRegisterToServices(Microsoft.VisualBasic.Net.IPEndPoint,Microsoft.VisualBasic.ComputingServices.PbsThread.ThreadTypes)">
 <summary>
 当任务进程开启的时候，会发送这个信号
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.PbsProtocol.SynchronizeData(System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.ComputingServices.PbsThread})">
 <summary>
 每当有一个新的节点主机或者节点进程实例注册到中心节点之后，都会在节点网络之中进行数据同步
 </summary>
 <param name="data"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.ComputingServices.PbsThread">
 <summary>
 每一个进程实例都是一条计算线程
 </summary>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.PbsThread.Guid">
 <summary>
 进程实例在服务器之上的唯一标识符
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.PbsThread.TaskGuid">
 <summary>
 运行于进程实例之中的细胞模型在数据库之中的模型编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.PbsThread.RemoteHostEp">
 <summary>
 该进程实例的远程节点的主机描述信息
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.ComputingServices.PbsThread.ServerLoad">
 <summary>
 当前节点的进程实例所处的节点主机的当前系统负荷
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.PbsThread.ThreadTypes.NodeServices">
 <summary>
 <see cref="T:Microsoft.VisualBasic.ComputingServices.ServicesComponents.NodeServices"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.ComputingServices.PbsThread.ThreadTypes.GridNode">
 <summary>
 <see cref="T:Microsoft.VisualBasic.ComputingServices.ServicesComponents.Node"/>
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.ComputingServices.PbsThread.InitNodeID(Microsoft.VisualBasic.Net.IPEndPoint,Microsoft.VisualBasic.ComputingServices.PbsThread.ThreadTypes)">
 <summary>
 在刚开始初始化的时候，是还没有<see cref="P:Microsoft.VisualBasic.ComputingServices.PbsThread.TaskGuid"></see>的，因为这个属性是来自于服务器之上的自动分配
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
